Usage: filter [options] [file1 file2 ...] 

Options:
 -b  --remove-blank-lines  removes empty lines.
 -d  --delete=X            deletes all occurrences of char X.
 -h  --help                display this information.
 -l  --tolower             convert all characters to lower case.
 -n  --line-numbers        prepend line numbers to each line.
 -r  --replace=XY          replace all char X with char Y.
 -u  --toupper             convert all characters to upper case.
 -x  --expand-tabs[=X]     convert tabs to X spaces (default is 8).

# macros =======================================================

cc=g++
cflags=-wall -wextra -ansi -pedantic -werror
exe=program.exe
outdir=gnu/
objs=$(outdir)driver.o $(outdir)scantext.o $(outdir)jumble.o
erase=rm

# targets ======================================================

$(outdir)$(exe) : $(objs)
	$(cc) $(objs) -o $(outdir)$(exe)

$(outdir)driver.o : driver.cpp scantext.h jumble.h
	$(cc) $(cflags) -c driver.cpp -o driver.o

$(outdir)jumble.o : jumble.cpp jumble.h
	$(cc) $(cflags) -c jumble.cpp -o jumble.o

$(outdir)scantext.o : scantext.cpp
	$(cc) $(cflags) -c scantext.cpp -o scantext.o

clean : 
	$(erase) $(objs) $(outdir)$(exe)

rebuild :
	$(make) clean
	$(make)


# MACROS =======================================================

CC=G++
CFLAGS=-WALL -WEXTRA -ANSI -PEDANTIC -WERROR
EXE=PROGRAM.EXE
OUTDIR=GNU/
OBJS=$(OUTDIR)DRIVER.O $(OUTDIR)SCANTEXT.O $(OUTDIR)JUMBLE.O
ERASE=RM

# TARGETS ======================================================

$(OUTDIR)$(EXE) : $(OBJS)
	$(CC) $(OBJS) -O $(OUTDIR)$(EXE)

$(OUTDIR)DRIVER.O : DRIVER.CPP SCANTEXT.H JUMBLE.H
	$(CC) $(CFLAGS) -C DRIVER.CPP -O DRIVER.O

$(OUTDIR)JUMBLE.O : JUMBLE.CPP JUMBLE.H
	$(CC) $(CFLAGS) -C JUMBLE.CPP -O JUMBLE.O

$(OUTDIR)SCANTEXT.O : SCANTEXT.CPP
	$(CC) $(CFLAGS) -C SCANTEXT.CPP -O SCANTEXT.O

CLEAN : 
	$(ERASE) $(OBJS) $(OUTDIR)$(EXE)

REBUILD :
	$(MAKE) CLEAN
	$(MAKE)


# Macros =======================================================

xx=g++
xFLAGS=-Wall -Wextra -ansi -pedantic -Werror
EXE=program.exe
OUTDIR=gnu/
OBJS=$(OUTDIR)driver.o $(OUTDIR)scantext.o $(OUTDIR)jumble.o
ERASE=rm

# TARGETS ======================================================

$(OUTDIR)$(EXE) : $(OBJS)
	$(xx) $(OBJS) -o $(OUTDIR)$(EXE)

$(OUTDIR)driver.o : driver.cpp scantext.h jumble.h
	$(xx) $(xFLAGS) -c driver.cpp -o driver.o

$(OUTDIR)jumble.o : jumble.cpp jumble.h
	$(xx) $(xFLAGS) -c jumble.cpp -o jumble.o

$(OUTDIR)scantext.o : scantext.cpp
	$(xx) $(xFLAGS) -c scantext.cpp -o scantext.o

clean : 
	$(ERASE) $(OBJS) $(OUTDIR)$(EXE)

rebuild :
	$(MAKE) clean
	$(MAKE)


# Macros =======================================================

CC=g++
CFLAGS=-Wall -Wextra -ansi -pedantic -Werror
EXE=program.exe
OUTDIR=gnu/
OBJS=(OUTDIR)driver.o (OUTDIR)scantext.o (OUTDIR)jumble.o
ERASE=rm

# TARGETS ======================================================

(OUTDIR)(EXE) : (OBJS)
	(CC) (OBJS) -o (OUTDIR)(EXE)

(OUTDIR)driver.o : driver.cpp scantext.h jumble.h
	(CC) (CFLAGS) -c driver.cpp -o driver.o

(OUTDIR)jumble.o : jumble.cpp jumble.h
	(CC) (CFLAGS) -c jumble.cpp -o jumble.o

(OUTDIR)scantext.o : scantext.cpp
	(CC) (CFLAGS) -c scantext.cpp -o scantext.o

clean : 
	(ERASE) (OBJS) (OUTDIR)(EXE)

rebuild :
	(MAKE) clean
	(MAKE)


# Macros =======================================================
CC=g++
CFLAGS=-Wall -Wextra -ansi -pedantic -Werror
EXE=program.exe
OUTDIR=gnu/
OBJS=$(OUTDIR)driver.o $(OUTDIR)scantext.o $(OUTDIR)jumble.o
ERASE=rm
# TARGETS ======================================================
$(OUTDIR)$(EXE) : $(OBJS)
	$(CC) $(OBJS) -o $(OUTDIR)$(EXE)
$(OUTDIR)driver.o : driver.cpp scantext.h jumble.h
	$(CC) $(CFLAGS) -c driver.cpp -o driver.o
$(OUTDIR)jumble.o : jumble.cpp jumble.h
	$(CC) $(CFLAGS) -c jumble.cpp -o jumble.o
$(OUTDIR)scantext.o : scantext.cpp
	$(CC) $(CFLAGS) -c scantext.cpp -o scantext.o
clean : 
	$(ERASE) $(OBJS) $(OUTDIR)$(EXE)
rebuild :
	$(MAKE) clean
	$(MAKE)
     1  # Macros =======================================================
     2  
     3  CC=g++
     4  CFLAGS=-Wall -Wextra -ansi -pedantic -Werror
     5  EXE=program.exe
     6  OUTDIR=gnu/
     7  OBJS=$(OUTDIR)driver.o $(OUTDIR)scantext.o $(OUTDIR)jumble.o
     8  ERASE=rm
     9  
    10  # TARGETS ======================================================
    11  
    12  $(OUTDIR)$(EXE) : $(OBJS)
    13  	$(CC) $(OBJS) -o $(OUTDIR)$(EXE)
    14  
    15  $(OUTDIR)driver.o : driver.cpp scantext.h jumble.h
    16  	$(CC) $(CFLAGS) -c driver.cpp -o driver.o
    17  
    18  $(OUTDIR)jumble.o : jumble.cpp jumble.h
    19  	$(CC) $(CFLAGS) -c jumble.cpp -o jumble.o
    20  
    21  $(OUTDIR)scantext.o : scantext.cpp
    22  	$(CC) $(CFLAGS) -c scantext.cpp -o scantext.o
    23  
    24  clean : 
    25  	$(ERASE) $(OBJS) $(OUTDIR)$(EXE)
    26  
    27  rebuild :
    28  	$(MAKE) clean
    29  	$(MAKE)
    30  
    31  
# Macros =======================================================

CC=g++
CFLAGS=-Wall -Wextra -ansi -pedantic -Werror
EXE=program.exe
OUTDIR=gnu/
OBJS=$(OUTDIR)driver.o $(OUTDIR)scantext.o $(OUTDIR)jumble.o
ERASE=rm

# TARGETS ======================================================

$(OUTDIR)$(EXE) : $(OBJS)
  $(CC) $(OBJS) -o $(OUTDIR)$(EXE)

$(OUTDIR)driver.o : driver.cpp scantext.h jumble.h
  $(CC) $(CFLAGS) -c driver.cpp -o driver.o

$(OUTDIR)jumble.o : jumble.cpp jumble.h
  $(CC) $(CFLAGS) -c jumble.cpp -o jumble.o

$(OUTDIR)scantext.o : scantext.cpp
  $(CC) $(CFLAGS) -c scantext.cpp -o scantext.o

clean : 
  $(ERASE) $(OBJS) $(OUTDIR)$(EXE)

rebuild :
  $(MAKE) clean
  $(MAKE)


# Macros =======================================================
=g++
FLAGS=-Wall -Wextra -ansi -pedantic -Werror
EXE=program.exe
OUTDIR=gnu/
OBJS=%(OUTDIR)driver.o %(OUTDIR)scantext.o %(OUTDIR)jumble.o
ERASE=rm
# TARGETS ======================================================
%(OUTDIR)%(EXE) : %(OBJS)
  %() %(OBJS) -o %(OUTDIR)%(EXE)
%(OUTDIR)driver.o : driver.cpp scantext.h jumble.h
  %() %(FLAGS) -c driver.cpp -o driver.o
%(OUTDIR)jumble.o : jumble.cpp jumble.h
  %() %(FLAGS) -c jumble.cpp -o jumble.o
%(OUTDIR)scantext.o : scantext.cpp
  %() %(FLAGS) -c scantext.cpp -o scantext.o
clean : 
  %(ERASE) %(OBJS) %(OUTDIR)%(EXE)
rebuild :
  %(MAKE) clean
  %(MAKE)
