struct task_struct {
  volatile long state;  
  void *stack;
  atomic_t usage;
  unsigned int flags; 
  unsigned int ptrace;

  int lock_depth;   

#ifdef CONFIG_SMP
#ifdef __ARCH_WANT_UNLOCKED_CTXSW
  int oncpu;
#endif
#endif

  int prio, static_prio, normal_prio;
  unsigned int rt_priority;
  const struct sched_class *sched_class;
  struct sched_entity se;
  struct sched_rt_entity rt;

#ifdef CONFIG_PREEMPT_NOTIFIERS
  
  struct hlist_head preempt_notifiers;
#endif

  
  unsigned char fpu_counter;
#ifdef CONFIG_BLK_DEV_IO_TRACE
  unsigned int btrace_seq;
#endif

  unsigned int policy;
  cpumask_t cpus_allowed;

#ifdef CONFIG_PREEMPT_RCU
  int rcu_read_lock_nesting;
  char rcu_read_unlock_special;
  struct list_head rcu_node_entry;
#endif 
#ifdef CONFIG_TREE_PREEMPT_RCU
  struct rcu_node *rcu_blocked_node;
#endif 
#ifdef CONFIG_RCU_BOOST
  struct rt_mutex *rcu_boost_mutex;
#endif 

#if defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT)
  struct sched_info sched_info;
#endif

  struct list_head tasks;
#ifdef CONFIG_SMP
  struct plist_node pushable_tasks;
#endif

  struct mm_struct *mm, *active_mm;
#if defined(SPLIT_RSS_COUNTING)
  struct task_rss_stat  rss_stat;
#endif

  int exit_state;
  int exit_code, exit_signal;
  int pdeath_signal;  
  
  unsigned int personality;
  unsigned did_exec:1;
  unsigned in_execve:1; 
  unsigned in_iowait:1;


  
  unsigned sched_reset_on_fork:1;

  pid_t pid;
  pid_t tgid;

#ifdef CONFIG_CC_STACKPROTECTOR
  
  unsigned long stack_canary;
#endif

  
  struct task_struct *real_parent; 
  struct task_struct *parent; 
  
  struct list_head children;  
  struct list_head sibling; 
  struct task_struct *group_leader; 

  
  struct list_head ptraced;
  struct list_head ptrace_entry;

  
  struct pid_link pids[PIDTYPE_MAX];
  struct list_head thread_group;

  struct completion *vfork_done;    
  int __user *set_child_tid;    
  int __user *clear_child_tid;    

  cputime_t utime, stime, utimescaled, stimescaled;
  cputime_t gtime;
#ifndef CONFIG_VIRT_CPU_ACCOUNTING
  cputime_t prev_utime, prev_stime;
#endif
  unsigned long nvcsw, nivcsw; 
  struct timespec start_time;     
  struct timespec real_start_time;  

  unsigned long min_flt, maj_flt;

  struct task_cputime cputime_expires;
  struct list_head cpu_timers[3];


  const struct cred __rcu *real_cred; 
  const struct cred __rcu *cred;  
  struct cred *replacement_session_keyring; 

  char comm[TASK_COMM_LEN]; 

  int link_count, total_link_count;
#ifdef CONFIG_SYSVIPC

  struct sysv_sem sysvsem;
#endif
#ifdef CONFIG_DETECT_HUNG_TASK

  unsigned long last_switch_count;
#endif

  struct thread_struct thread;

  struct fs_struct *fs;

  struct files_struct *files;

  struct nsproxy *nsproxy;

  struct signal_struct *signal;
  struct sighand_struct *sighand;

  sigset_t blocked, real_blocked;
  sigset_t saved_sigmask; 
  struct sigpending pending;

  unsigned long sas_ss_sp;
  size_t sas_ss_size;
  int (*notifier)(void *priv);
  void *notifier_data;
  sigset_t *notifier_mask;
  struct audit_context *audit_context;
#ifdef CONFIG_AUDITSYSCALL
  uid_t loginuid;
  unsigned int sessionid;
#endif
  seccomp_t seccomp;


    u32 parent_exec_id;
    u32 self_exec_id;

  spinlock_t alloc_lock;

#ifdef CONFIG_GENERIC_HARDIRQS
  
  struct irqaction *irqaction;
#endif

  
  raw_spinlock_t pi_lock;

#ifdef CONFIG_RT_MUTEXES
  
  struct plist_head pi_waiters;
  
  struct rt_mutex_waiter *pi_blocked_on;
#endif

#ifdef CONFIG_DEBUG_MUTEXES
  
  struct mutex_waiter *blocked_on;
#endif
#ifdef CONFIG_TRACE_IRQFLAGS
  unsigned int irq_events;
  unsigned long hardirq_enable_ip;
  unsigned long hardirq_disable_ip;
  unsigned int hardirq_enable_event;
  unsigned int hardirq_disable_event;
  int hardirqs_enabled;
  int hardirq_context;
  unsigned long softirq_disable_ip;
  unsigned long softirq_enable_ip;
  unsigned int softirq_disable_event;
  unsigned int softirq_enable_event;
  int softirqs_enabled;
  int softirq_context;
#endif
#ifdef CONFIG_LOCKDEP
# define MAX_LOCK_DEPTH 48UL
  u64 curr_chain_key;
  int lockdep_depth;
  unsigned int lockdep_recursion;
  struct held_lock held_locks[MAX_LOCK_DEPTH];
  gfp_t lockdep_reclaim_gfp;
#endif


  void *journal_info;


  struct bio_list *bio_list;


  struct reclaim_state *reclaim_state;

  struct backing_dev_info *backing_dev_info;

  struct io_context *io_context;

  unsigned long ptrace_message;
  siginfo_t *last_siginfo; 
  struct task_io_accounting ioac;
#if defined(CONFIG_TASK_XACCT)
  u64 acct_rss_mem1;  
  u64 acct_vm_mem1; 
  cputime_t acct_timexpd; 
#endif
#ifdef CONFIG_CPUSETS
  nodemask_t mems_allowed;  
  int mems_allowed_change_disable;
  int cpuset_mem_spread_rotor;
  int cpuset_slab_spread_rotor;
#endif
#ifdef CONFIG_CGROUPS
  
  struct css_set __rcu *cgroups;
  
  struct list_head cg_list;
#endif
#ifdef CONFIG_FUTEX
  struct robust_list_head __user *robust_list;
#ifdef CONFIG_COMPAT



  struct compat_robust_list_head __user *compat_robust_list;
#endif
  struct list_head pi_state_list;
  struct futex_pi_state *pi_state_cache;
#endif
#ifdef CONFIG_PERF_EVENTS
  struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
  struct mutex perf_event_mutex;
  struct list_head perf_event_list;
#endif
#ifdef CONFIG_NUMA
  struct mempolicy *mempolicy;  
  short il_next;
#endif
  atomic_t fs_excl; 
  struct rcu_head rcu;

  
  struct pipe_inode_info *splice_pipe;
#ifdef  CONFIG_TASK_DELAY_ACCT
  struct task_delay_info *delays;
#endif
#ifdef CONFIG_FAULT_INJECTION
  int make_it_fail;
#endif
  struct prop_local_single dirties;
#ifdef CONFIG_LATENCYTOP
  int latency_record_count;
  struct latency_record latency_record[LT_SAVECOUNT];
#endif
  
  unsigned long timer_slack_ns;
  unsigned long default_timer_slack_ns;

  struct list_head  *scm_work_list;
#ifdef CONFIG_FUNCTION_GRAPH_TRACER
  
  int curr_ret_stack;
  
  struct ftrace_ret_stack *ret_stack;
  
  unsigned long long ftrace_timestamp;
  
  atomic_t trace_overrun;
  
  atomic_t tracing_graph_pause;
#endif
#ifdef CONFIG_TRACING
  
  unsigned long trace;
  
  unsigned long trace_recursion;
#endif 
#ifdef CONFIG_CGROUP_MEM_RES_CTLR 
  struct memcg_batch_info {
    int do_batch; 
    struct mem_cgroup *memcg; 
    unsigned long bytes;    
    unsigned long memsw_bytes; 
  } memcg_batch;
#endif
};

