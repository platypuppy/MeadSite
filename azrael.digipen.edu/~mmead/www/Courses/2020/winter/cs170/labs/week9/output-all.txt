
********** TestPush **********
Empty array:
(size=0, capacity=0, allocs=0)
push_back 5 integers:
0  (size=1, capacity=1, allocs=1)
0  1  (size=2, capacity=2, allocs=2)
0  1  2  (size=3, capacity=4, allocs=3)
0  1  2  3  (size=4, capacity=4, allocs=3)
0  1  2  3  4  (size=5, capacity=8, allocs=4)
push_front 5 integers:
0  0  1  2  3  4  (size=6, capacity=8, allocs=4)
1  0  0  1  2  3  4  (size=7, capacity=8, allocs=4)
2  1  0  0  1  2  3  4  (size=8, capacity=8, allocs=4)
3  2  1  0  0  1  2  3  4  (size=9, capacity=16, allocs=5)
4  3  2  1  0  0  1  2  3  4  (size=10, capacity=16, allocs=5)

********** TestSubscripts **********
push_back 10 even integers:
0  2  4  6  8  10  12  14  16  18  (size=10, capacity=16, allocs=5)
multiple each value by 3:
0  6  12  18  24  30  36  42  48  54  (size=10, capacity=16, allocs=5)

********** TestSubscript1 **********
push_back 10 even integers:
2  4  6  6  8  10  6  12  -6  14  16  6  6  (size=13, capacity=16, allocs=5)
using subscript: a[6]
a[6] = 6

********** TestSubscript2 **********
push_back 10 even integers:
2  4  6  6  8  10  6  12  -6  14  16  6  6  (size=13, capacity=16, allocs=5)

********** TestALot1 **********
push_back 10 even integers:
0  2  4  6  8  10  12  14  16  18  (size=10, capacity=16, allocs=5)
clear:
(size=0, capacity=0, allocs=5)
push_back 10 odd integers:
1  3  5  7  9  11  13  15  17  19  (size=10, capacity=16, allocs=10)
push_back 10 more integers:
1  3  5  7  9  11  13  15  17  19  0  1  2  3  4  5  6  7  8  9  (size=20, capacity=32, allocs=11)
clear:
(size=0, capacity=0, allocs=11)
