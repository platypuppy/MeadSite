
********** TestSwap1 **********
push_back integers:
a: 1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
b: 10  20  30  40  50  (size=5, capacity=8, allocs=4)
swapv a,b:
a: 10  20  30  40  50  (size=5, capacity=8, allocs=4)
b: 1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
swapv a,c:
a: (size=0, capacity=0, allocs=0)
c: 10  20  30  40  50  (size=5, capacity=8, allocs=4)
swapv b,b:
b: 1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)

********** TestReverse1 **********
push_back integers:
1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
Reversed:
10  9  8  7  6  5  4  3  2  1  (size=10, capacity=16, allocs=5)
Remove last element:
10  9  8  7  6  5  4  3  2  (size=9, capacity=16, allocs=5)
Reversed:
2  3  4  5  6  7  8  9  10  (size=9, capacity=16, allocs=5)

********** TestReverse2 **********
push_back integers:
1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
Reversed:
10  9  8  7  6  5  4  3  2  1  (size=10, capacity=16, allocs=5)
Remove first element:
9  8  7  6  5  4  3  2  1  (size=9, capacity=16, allocs=5)
Reversed:
1  2  3  4  5  6  7  8  9  (size=9, capacity=16, allocs=5)
Remove last element:
1  2  3  4  5  6  7  8  (size=8, capacity=16, allocs=5)
Reversed:
8  7  6  5  4  3  2  1  (size=8, capacity=16, allocs=5)
Remove first element:
7  6  5  4  3  2  1  (size=7, capacity=16, allocs=5)
Reversed:
1  2  3  4  5  6  7  (size=7, capacity=16, allocs=5)
Remove last element:
1  2  3  4  5  6  (size=6, capacity=16, allocs=5)
Reversed:
6  5  4  3  2  1  (size=6, capacity=16, allocs=5)
Remove first element:
5  4  3  2  1  (size=5, capacity=16, allocs=5)
Reversed:
1  2  3  4  5  (size=5, capacity=16, allocs=5)
Remove last element:
1  2  3  4  (size=4, capacity=16, allocs=5)
Reversed:
4  3  2  1  (size=4, capacity=16, allocs=5)
Remove first element:
3  2  1  (size=3, capacity=16, allocs=5)
Reversed:
1  2  3  (size=3, capacity=16, allocs=5)
Remove last element:
1  2  (size=2, capacity=16, allocs=5)
Reversed:
2  1  (size=2, capacity=16, allocs=5)
Remove first element:
1  (size=1, capacity=16, allocs=5)
Reversed:
1  (size=1, capacity=16, allocs=5)
Remove last element:
(size=0, capacity=16, allocs=5)
Reversed:
(size=0, capacity=16, allocs=5)

********** TestEqual1 **********
push_back integers:
a: 1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
b: 1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
a is equal to b
remove last element of a:
a: 1  2  3  4  5  6  7  8  9  (size=9, capacity=16, allocs=5)
b: 1  2  3  4  5  6  7  8  9  10  (size=10, capacity=16, allocs=5)
a is NOT equal to b
remove last element of b:
a: 1  2  3  4  5  6  7  8  9  (size=9, capacity=16, allocs=5)
b: 1  2  3  4  5  6  7  8  9  (size=9, capacity=16, allocs=5)
a is equal to b
change last element of b to 100:
a: 1  2  3  4  5  6  7  8  9  (size=9, capacity=16, allocs=5)
b: 1  2  3  4  5  6  7  8  100  (size=9, capacity=16, allocs=5)
a is NOT equal to b

********** TestShrink1 **********
push_back 8 integers:
0  1  2  3  4  5  6  7  (size=8, capacity=8, allocs=4)
shrink:
0  1  2  3  4  5  6  7  (size=8, capacity=8, allocs=4)
pop last 3:
0  1  2  3  4  (size=5, capacity=8, allocs=4)
shrink:
0  1  2  3  4  (size=5, capacity=5, allocs=5)
push_back one integer:
0  1  2  3  4  100  (size=6, capacity=10, allocs=6)
shrink:
0  1  2  3  4  100  (size=6, capacity=6, allocs=7)
shrink:
0  1  2  3  4  100  (size=6, capacity=6, allocs=7)
clear:
(size=0, capacity=0, allocs=7)
shrink:
(size=0, capacity=0, allocs=7)

********** TestSubscriptEx **********
Construct from int array:
2  4  6  6  8  10  6  12  -6  14  16  6  6  (size=13, capacity=13, allocs=1)
2  4  6  6  8  10  6  12  -6  14  16  6  6  (size=13, capacity=13, allocs=1)
accessing subscript on const vector: a[26]
a[26] = Bad subscript: 26
accessing subscript on non-const vector: b[26]
b[26] = Bad subscript: 26

********** TestInsertEx **********
Construct from int array:
2  4  6  6  8  10  6  12  -6  14  16  6  6  (size=13, capacity=13, allocs=1)
insert integer at index 39:
Bad subscript: 39

********** TestSwapStress **********
Pushing back...
Swapping...
0  1  3  7  15  31  63  127  255  511  1023  2047  4095  8191  16383  32767  65535  131071  262143  524287  (size=1000000, capacity=1048576, allocs=21)
0  3  9  21  45  93  189  381  765  1533  3069  6141  12285  24573  49149  98301  196605  393213  786429  1572861  (size=1000000, capacity=1048576, allocs=21)
0  2  6  14  30  62  126  254  510  1022  2046  4094  8190  16382  32766  65534  131070  262142  524286  1048574  (size=1000000, capacity=1048576, allocs=21)
Done...
